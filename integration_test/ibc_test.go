package integration

import (
	"encoding/hex"
	"fmt"
	. "github.com/kaifei-bianjie/common-parser/codec"
	"github.com/kaifei-bianjie/common-parser/utils"
)

func (s IntegrationTestSuite) TestIbc() {
	cases := []SubTest{
		{
			"CreateClient",
			CreateClient,
		},
		{
			"RecvPacket",
			RecvPacket,
		},
		{
			"UpdateClient",
			UpdateClient,
		},
	}

	for _, t := range cases {
		s.Run(t.testName, func() {
			t.testCase(s)
		})
	}
}

func CreateClient(s IntegrationTestSuite) {
	txBytes, err := hex.DecodeString("0af4080af1080a1c2f6373636861696e2e6962632e4d7367437265617465436c69656e7412d0080a0b7a68656a69616e675f323512e2060a2e2f6373636861696e2e6962632e6c69676874636c69656e74732e62726f636861696e2e436c69656e74537461746512af0608ccde3510e6e2d9ff051a82020a2a30783030303030303030303030643661616330303030303030303566663636383235303030303030303012423078636139343839346336353730316338313139373765373966393535343234383765626538643632623932336233653432633439343463636163323635393833381a42307866616436323930623266306266623761666135623732396231663262656137653139366562616431353862616131613262396266303036303464323330333365224230786434663535653935636338636232326634653631613732396439373034373438653665623430303031306438666337623366306533353934646463643433656528ccde3530e6e2d9ff052285010a8201307862613939343566386533383539353962663435373831333239313163363933323532653362376432393664633634363733343231393639363136303162666439613838333732653164623461616163356665633238646662336534313131636465353066326564363138313339653137653836323332633136316330626230382285010a8201307836353837353063333363333263633337386464663363633865393663323432336635396363343936613563323231623233373337313865636339326430643065363064663239376131636635613734356532633339383561623066653437363936623636373036323934643663333034373233663235326639316261323134382285010a8201307864653962636337333130356233333663613862353034306238313632613666383634366166366364636333623037373532363330646165643735383035326364363831623133333831316365303136616131373735363462373633383831363039316365363935656366653565373530336264356162626635623530313832362285010a8201307861626433633339396131633066343764653662343866623862353739363265376136653935373132303665633533623938373634653861326238356337313363623861326261366463313532663732353135323137343731316135393266616630303234393436393330316139323035636563333562353331383339623763661aaf010a312f6373636861696e2e6962632e6c69676874636c69656e74732e62726f636861696e2e436f6e73656e7375735374617465127a0a2a307830303030303030303030306436616163303030303030303035666636363832353030303030303030124230786361393438393463363537303163383131393737653739663935353432343837656265386436326239323362336534326334393434636361633236353938333818ccde3520e6e2d9ff05222a69616131676b3034367a3434656e64747a6b3776647836356d706d67777a747961306d35353272706368125d0a480a400a192f636f736d6f732e63727970746f2e736d322e5075624b657912230a2102123fe28832b770c9fadc02dddabd0ec98f0dbb070401a3c2c1d9f3676f1b5cc812040a02080112110a0a0a05706f696e741201341080ade2041a407084257b626c8168146f77a78d6ca991e5d25f73d13475d57b0749aef7aac6b3bb3173000046da2bf5bbe3d95502fb40ecf90f4a62105ce611eed6492efa9b20")
	if err != nil {
		fmt.Println(err.Error())
	}
	authTx, err := GetSigningTx(txBytes)
	if err != nil {
		fmt.Println(err.Error())
	}
	for _, msg := range authTx.GetMsgs() {
		if doc, ok := s.Ibc.HandleTxMsg(msg); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(doc))
		}
	}
}

func RecvPacket(s IntegrationTestSuite) {
	txBytes, err := hex.DecodeString("")
	if err != nil {
		fmt.Println(err.Error())
	}
	authTx, err := GetSigningTx(txBytes)
	if err != nil {
		fmt.Println(err.Error())
	}
	for _, msg := range authTx.GetMsgs() {
		if doc, ok := s.Ibc.HandleTxMsg(msg); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(doc))
		}
	}
}

func UpdateClient(s IntegrationTestSuite) {
	txBytes, err := hex.DecodeString("0aff030a8c010a1c2f6373636861696e2e6962632e4d7367557064617465436c69656e74126c0a107368616e677a68656e675f6465765f33122c0a242f6373636861696e2e6962632e6c69676874636c69656e74732e7872702e486561646572120408d8bb411a2a6961613139796b6766763765356e6a6a6a6d616833616c646563356d766b336c37366a6c6a673765716b0aed020a1a2f6373636861696e2e6962632e4d7367526563765061636b657412ce020aeb010ae8017b226964223a22222c2274696d657374616d70223a22363935323939303630222c22686569676874223a2231303732363030222c2274785f68617368223a2244454346364546454137363143373535384239443632423737333146393031414434424539444332394542434446433638433041463435373643384441303644222c22636f6e74656e7473223a5b7b226469676573745f616c676f223a22222c22646967657374223a22222c22757269223a22393837363534333231343334333433313431323332313433372f30222c226d657461223a22227d5d2c2263726561746f72223a22227d18d8bb412a11616161333231656666333135646232326332107368616e677a68656e675f6465765f333a096962637265636f7264422a6961613139796b6766763765356e6a6a6a6d616833616c646563356d766b336c37366a6c6a673765716b12600a4a0a400a192f636f736d6f732e63727970746f2e736d322e5075624b657912230a210263424411692a1e4d6dd1e9a750cc64283487871a75128b3d2e531ce9a04800cc12040a020801180112120a0b0a05706f696e741202333010c096b1021a40908804d7b89f370ee7c9fab17d14582cfaed38461585450f4daad1f5e60e66932096bf2311dafffb1c98d6ca23b792e23cb9a49b45e7e1872676b27b8ad303fb")
	if err != nil {
		fmt.Println(err.Error())
	}
	authTx, err := GetSigningTx(txBytes)
	if err != nil {
		fmt.Println(err.Error())
	}
	for _, msg := range authTx.GetMsgs() {
		if doc, ok := s.Ibc.HandleTxMsg(msg); ok {
			fmt.Println(utils.MarshalJsonIgnoreErr(doc))
		}
	}
}
